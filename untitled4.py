# -*- coding: utf-8 -*-
"""Untitled4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qyeyoDB2u0Jf00f0fBVheBPkb2g3_Y0T
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
from streamlit_echarts import st_echarts
import json
st.set_page_config(
    page_title=None, 
    page_icon=None, 
    layout="wide", 
    initial_sidebar_state="auto", 
    menu_items=None)

st.title('Sankey Diagrams for Thermal Loads')

st.markdown("# Sankey")
st.sidebar.markdown("# Main page üéà")

header = st.container()
dataset = st.container()
features = st.container()
modelTraining = st.container()

options = st.container()

a = open('C:/Users/ZY Wang/Desktop/test/data.json')
data = json.load(a)

#   for datalinks in datalink['links']:

#with open("node.json") as json_file2:
#  datanodes = json.load(json_file2)

with header:
    st.title("Sankey Diagram Beispiel")

options = {
      "title": {
        "text": ' '
      },
      "tooltip": {
        "trigger": 'item',
        "triggerOn": 'mousemove'
      },
      "series": [
        {
          "type": 'sankey',
          "data": data["nodes"],
          "links": data["links"],
          "emphasis": {
            "focus": 'adjacency'
          },
          "lineStyle": {
            "color": 'gradient',
            "curveness": 0.5
          }
        }
      ]
    };


st_echarts(options=options)


st.markdown("# Linien-Diagramm")
st.sidebar.markdown("# Page 2 ‚ùÑÔ∏è")

chart_data = pd.DataFrame(
     np.random.randn(20, 3),
     columns=['a', 'b', 'c'])

st.line_chart(chart_data)

'''
$.when(
  $.get(ROOT_PATH + '/data/asset/data/life-expectancy-table.json'),
  $.getScript(
    'https://fastly.jsdelivr.net/npm/echarts-simple-transform/dist/ecSimpleTransform.min.js'
  )
).done(function (res) {
  run(res[0]);
});
function run(_rawData) {
  echarts.registerTransform(ecSimpleTransform.aggregate);
  option = {
    dataset: [
      {
        "id": 'raw',
        "source": _rawData
      },
      {
        "id": 'since_year',
        "fromDatasetId": 'raw',
        "transform: [
          {
            type: 'filter',
            config: {
              dimension: 'Year',
              gte: 1950
            }
          }
        ]
      },
      {
        id: 'income_aggregate',
        fromDatasetId: 'since_year',
        transform: [
          {
            type: 'ecSimpleTransform:aggregate',
            config: {
              resultDimensions: [
                { name: 'min', from: 'Income', method: 'min' },
                { name: 'Q1', from: 'Income', method: 'Q1' },
                { name: 'median', from: 'Income', method: 'median' },
                { name: 'Q3', from: 'Income', method: 'Q3' },
                { name: 'max', from: 'Income', method: 'max' },
                { name: 'Country', from: 'Country' }
              ],
              groupBy: 'Country'
            }
          },
          {
            type: 'sort',
            config: {
              dimension: 'Q3',
              order: 'asc'
            }
          }
        ]
      }
    ],
    title: {
      text: 'Income since 1950'
    },
    tooltip: {
      trigger: 'axis',
      confine: true
    },
    xAxis: {
      name: 'Income',
      nameLocation: 'middle',
      nameGap: 30,
      scale: true
    },
    yAxis: {
      type: 'category'
    },
    grid: {
      bottom: 100
    },
    legend: {
      selected: { detail: false }
    },
    dataZoom: [
      {
        type: 'inside'
      },
      {
        type: 'slider',
        height: 20
      }
    ],
    series: [
      {
        name: 'boxplot',
        type: 'boxplot',
        datasetId: 'income_aggregate',
        itemStyle: {
          color: '#b8c5f2'
        },
        encode: {
          x: ['min', 'Q1', 'median', 'Q3', 'max'],
          y: 'Country',
          itemName: ['Country'],
          tooltip: ['min', 'Q1', 'median', 'Q3', 'max']
        }
      },
      {
        name: 'detail',
        type: 'scatter',
        datasetId: 'since_year',
        symbolSize: 6,
        tooltip: {
          trigger: 'item'
        },
        label: {
          show: true,
          position: 'top',
          align: 'left',
          verticalAlign: 'middle',
          rotate: 90,
          fontSize: 12
        },
        itemStyle: {
          color: '#d00000'
        },
        encode: {
          x: 'Income',
          y: 'Country',
          label: 'Year',
          itemName: 'Year',
          tooltip: ['Country', 'Year', 'Income']
        }
      }
    ]
  };
  myChart.setOption(option);
}
       '''